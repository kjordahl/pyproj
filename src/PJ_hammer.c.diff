--- ../../proj/src/PJ_hammer.c	2011-12-15 09:24:19.000000000 -0700
+++ PJ_hammer.c	2012-04-02 15:37:13.000000000 -0600
@@ -2,9 +2,10 @@
 	double w; \
 	double m, rm;
 #define PJ_LIB__
+# define EPS 1.0e-10
 # include	<projects.h>
 PROJ_HEAD(hammer, "Hammer & Eckert-Greifendorff")
-	"\n\tMisc Sph, no inv.\n\tW= M=";
+	"\n\tMisc Sph, \n\tW= M=";
 FORWARD(s_forward); /* spheroid */
 	double cosphi, d;
 
@@ -13,6 +14,19 @@
 	xy.y = P->rm * d * sin(lp.phi);
 	return (xy);
 }
+INVERSE(s_inverse); /* spheroid */
+        double z;
+	z = sqrt(1. - 0.25*P->w*P->w*xy.x*xy.x - 0.25*xy.y*xy.y);
+	if (fabs(2.*z*z-1.) < EPS) {
+           lp.lam = HUGE_VAL;
+           lp.phi = HUGE_VAL;
+           pj_errno = -14;
+	} else {
+	   lp.lam = aatan2(P->w * xy.x * z,2. * z * z - 1)/P->w;
+	   lp.phi = aasin(P->ctx,z * xy.y);
+        }
+	return (lp);
+}
 FREEUP; if (P) pj_dalloc(P); }
 ENTRY0(hammer)
 	if (pj_param(P->ctx, P->params, "tW").i) {
@@ -25,5 +39,5 @@
 		P->m = 1.;
 	P->rm = 1. / P->m;
 	P->m /= P->w;
-	P->es = 0.; P->fwd = s_forward;
+	P->es = 0.; P->fwd = s_forward; P->inv = s_inverse;
 ENDENTRY(P)
